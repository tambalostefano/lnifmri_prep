#!/bin/bash
#
# LNiF MRI Lab Pipeline for preprocessing of
# structural and functional MRI dataset
# stefano.tambalo@unitn.it - 20200310
#
# Regression and filtering of SD-corrected EPI:
# -   WM and CSF regressors
# -   Motion parameters
# -   Temporal masking
# -   Bandpass filtering
# -   ICA (ncomp=40) [optional]
#
########################################################################
export LC_ALL=C

shopt -s extglob
UsageFSL() {
    printf "\n***************************************************\n"
    printf "LNiF MRI Lab Preprocessing Pipeline\n"
    printf "CIMeC - Center for Mind/Brain Science\n\n"
    printf "\tFSLDIR not set!\n\n"
    printf "\tRequires:\n\t\tFSL (https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FSL)\n"
    printf "\n\n(c) stefano.tambalo@unitn.it, 2020.\n"
    printf "***************************************************\n\n"
    exit 1
}
UsageEPI() {
    printf "\n***************************************************\n"
    printf "LNiF MRI Lab Preprocessing Pipeline\n"
    printf "CIMeC - Center for Mind/Brain Science\n\n"
    printf "\tUsage:\n\t\tlnifmri_prep04_filter <flag>\n"
    printf "\t<flag>:\n"
    printf "\t\t-t:\tfor task/event fMRI;\n"
    printf "\t\t-r:\tfor resting-state fMRI;\n\n"    
    printf "\te.g.:\tlnif_preproc_04_filter -y"
    printf "\n\n(c) stefano.tambalo@unitn.it, 2020.\n"
    printf "***************************************************\n\n"
    exit 1
}

Start() {
    printf "\n***************************************************\n"
    printf "LNiF MRI Lab Preprocessing Pipeline\n"
    printf "CIMeC - Center for Mind/Brain Science\n\n"
    printf "Process functional data (nuisance regression, smoothing, BP filtering)\n"
}

NextStep() {
    printf "\n***************************************************\n"
    printf "LNiF MRI Lab Preprocessing Pipeline\n"
    printf "CIMeC - Center for Mind/Brain Science\n\n"
    printf "Complete. Exec. Time: ${exectime}\nPreprocessing pipeline complete."
    printf "\n\n***************************************************\n\n"
    exit 1
}

[ "$FSLDIR" = "" ] && UsageFSL
[ "$1" = "" ] && UsageEPI

#Read answer for optional single-subject ICA
getopts yn option

exectime=0
SECONDS=0

Start

for SUBDIR in sub-*[0-9] ; do
	printf -v STR "${SUBDIR}_ses-01_T1w"
	
	t1struc=$SUBDIR/$STR.anat/T1_biascorr.nii.gz
	bstruc=$SUBDIR/$STR.anat/T1_biascorr_brain.nii.gz
	wmstruc=$SUBDIR/$STR.anat/T1_wmedge.nii.gz
	csfstruc=$SUBDIR/$STR.anat/T1_csfedge.nii.gz
	gmstruc=$SUBDIR/$STR.anat/T1_gmedge.nii.gz
	brainmask=$SUBDIR/$STR.anat/T1_biascorr_brain_mask.nii.gz
	std=$FSLDIR/data/standard/MNI152_T1_2mm.nii.gz
	
	#Load SDC-EPI timeseries
	for epiimg in `ls -d1 $SUBDIR/func/sdc*/*ep2d_bold*[0-9]_+([0-9]).nii.gz`; do

		#Load bold EPI scan
		outpath=`dirname ${epiimg}`
		scanname=`basename ${epiimg}`
		epiname=`$FSLDIR/bin/remove_ext ${epiimg}`
		epivol="${epiname}_SINGLEVOL"
		jsonname=`$FSLDIR/bin/remove_ext ${scanname}`
		OUTNAME=""

		TR=$(cat $SUBDIR/func/${jsonname}.json | sed 's/.*"RepetitionTime": \(.*\),.*/\1/;t;d')
		#printf "\tScan Name: $scanname\n\tEpi Name: $epiname\n\tEpi IMG: $epiimg\n\tJSON name: $jsonname\n\tTR: $TR\n"

	    printf "\tExtracting WM regressor\n"
	    $FSLDIR/bin/fslmeants -i ${epiimg} -o ${epiname}_wmregressor.txt -m ${wmstruc}

	    printf "\tExtracting CSF regressor\n"
	    $FSLDIR/bin/fslmeants -i ${epiimg} -o ${epiname}_csfregressor.txt -m ${csfstruc}

	    printf "\tExtracting GM regressor\n"
	    $FSLDIR/bin/fslmeants -i ${epiimg} -o ${epiname}_gmregressor.txt -m ${gmstruc}

	    printf "\tExtracting GS regressor\n"
	    $FSLDIR/bin/fslmeants -i ${epiimg} -o ${epiname}_gsregressor.txt -m ${brainmask}

	    #Compose full matrix of regressors (nuisance)
	    if [ -f $SUBDIR/func/${jsonname}_motout.txt ]; then
	        printf "\tComposing nuisance regressor (motion, outliers, WM, CSF)\n"
	        paste -d " " 	$SUBDIR/func/${jsonname}.par \
	        				$SUBDIR/func/${jsonname}_motout.txt \
	        				${epiname}_wmregressor.txt \
	        				${epiname}_csfregressor.txt > ${epiname}_nuisance.txt;
	    else
	        printf "\tComposing nuisance regressor (motion, WM, CSF)\n"
	        paste -d " "	$SUBDIR/func/${jsonname}.par \
	        				${epiname}_wmregressor.txt \
	        				${epiname}_csfregressor.txt > ${epiname}_nuisance.txt;
	    fi
	    #Regression of nuisance matrix
	    printf "\tRegression of nuisance signals\n"
	    $FSLDIR/bin/fsl_glm	-i ${epiimg} \
	    					-d ${epiname}_nuisance.txt \
	    					-o ${epiname}_nuisance_betas \
	    					-m ${brainmask} \
	    					--out_res=${epiimg} --demean;

	    #echo "${g}: Noise reduction"
	    #$FSLDIR/bin/susan $epiimg -1 0.6 3 1 1 ${brainmask} -1 $epiimg

	    #if it's NOT a task-based scan, apply bandpass filtering
	    if [[ ${scanname} != *"task"* ]]; then
	    		OUTNAME="${outpath}/${SUBDIR}_bold_rest"
	    		hp=$(echo 100/2/$TR | bc -l)   #0.01Hz, sigma: 1/(2*f*TR)	as reported in fsl mailing list
	    		lp=-1    #0.1Hz - check it after computing the spectrum, see below
	    		printf "\tBandpass filtering (hp=%s, lp=%s\n" "${hp}" "${lp}"
	    		$FSLDIR/bin/fslmaths $epiimg -bptf $hp $lp $OUTNAME
	    		#Compute frequency spectrum
	    		printf "\tCompute Spectrum\n"
	    		$FSLDIR/bin/fslpspec $OUTNAME ${OUTNAME}_spectrum
	    		$FSLDIR/bin/fslmeants -i ${OUTNAME}_spectrum -o ${OUTNAME}_spectrum.txt #-m ${g}_brainmask 
	    		Len=$(cat ./${OUTNAME}_spectrum.txt | wc -l )
	    		Nyq=$(echo "0.5/2/$Len" | bc -l)
	    		$FSLDIR/bin/fsl_tsplot	-i ${OUTNAME}_spectrum.txt \
	    								-u $Nyq \
	    								-y "Power" -x "Frequency (Hz)" \
	    								-t 'Power Spectrum' \
	    								-a pow -w 640 -h 144 \
	    								--ymin=0 --ymax=500000 \
	    								-o ${OUTNAME}_spectrum.png;
	    		printf "\tDONE.\n\n"
	    	#otherwise skip this step
	    	else
	    		OUTNAME="${outpath}/${SUBDIR}_bold_task"
	    		$FSLDIR/bin/fslmaths $epiimg -mul 1 $OUTNAME
	    		printf "\tTask-based timeseries: skipping bandpass filter\n\n"
	    fi
	 	
	 	#Warping of filtered data to MNI space
	 	printf "\tFinal warping of EPI to MNI\n\n"
		$FSLDIR/bin/applywarp	-i ${OUTNAME} \
								-r ${std} \
								-w ${epiname}_warp2MNI.nii.gz \
								--interp=spline \
								-o ${OUTNAME}-MNI.nii.gz;
		
		#Create smoothed version of subj- and std-space timeseries
		printf "\tSpatial smoothing\n"
	    $FSLDIR/bin/fslmaths ${OUTNAME} -kernel gauss 3 -fmean ${OUTNAME}-smooth
	    $FSLDIR/bin/fslmaths ${OUTNAME}-MNI -kernel gauss 3 -fmean ${OUTNAME}-MNI-smooth
	    #Set GM mask as weighting file?

	    #Run single-subject ICA [otional]
	    case ${option} in
	    	"y")
   				comp=40
   				printf "\tRunning ICA (n=${comp})\n"
   				$FSLDIR/bin/melodic -i ${OUTNAME}-smooth \
   									-o ${OUTNAME}-smooth.ica \
   									--nobet --tr=$TR --mmthresh=0.66 \
   									-d ${comp} \
   								-m ${brainmask} \
   								--report -v;
   				;;
   			"n")
   				printf "\tSkipping SS-ICA\n"
				;;
		esac

		#Clean up directory
   		mkdir -p ${outpath}/lnifmri_prep_files
		mv ${epiname}*.* ${outpath}/lnifmri_prep_files/

	done #for epiimg
done #for SUBDIR

duration=$SECONDS
printf -v exectime "$(($duration / 60))m:$(($duration % 60))s."
NextStep