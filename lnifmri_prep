#!/bin/bash
#
# LNiF MRI Lab Pipeline for preprocessing of
# structural and functional MRI dataset
# stefano.tambalo@unitn.it - 20200310
#
########################################################################
export LC_ALL=C

shopt -s extglob
UsageFSL() {
    printf "**************************************************************\n"
    printf "**************************************************************\n"
    printf "LNiF MRI Lab Preprocessing Pipeline\n"
    printf "CIMeC - Center for Mind/Brain Science\n\n"
    printf "\tFSLDIR not set!\n\n"
    printf "\tRequires:\n\t\tFSL (https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FSL)\n"
    printf "\n\n(c) stefano.tambalo@unitn.it, 2020."
    printf "**************************************************************\n"
    printf "**************************************************************\n"
    exit 1
}

Setup() {
    printf "**************************************************************\n"
    printf "LNiF MRI Lab Preprocessing Pipeline\n"
    printf "CIMeC - Center for Mind/Brain Science\n\n"
    printf "Pipeline setup\n\n"
}

Start() {
    stamp=`date +%Y%m%d_%H%M%S`
    printf "**************************************************************\n"
    printf "**************************************************************\n"
    printf "LNiF MRI Lab Preprocessing Pipeline\n"
    printf "CIMeC - Center for Mind/Brain Science\n\n"
    printf "Batch processing\t\t\tStarted\t [  %s ]\n" "${stamp}"
    printf "\tOut dir: ${DIRNAME}\n"
    printf "\tLog dir: ${DIRNAME}/logs\n\n"
}

Progress() {
    printf "\tComplete [ ${laptime} ]\n"
}

Stop() {
    printf "\nFinished.\t\t\t\t Runtime [ ${exectime} ]\n"
    printf "\n(c) stefano.tambalo@unitn.it, 2020.\n"
    printf "**************************************************************\n"
    printf "**************************************************************\n\n"
    exit 1
}

[ "$FSLDIR" = "" ] && UsageFSL

clear 
Setup

default=`date +%Y%m%d_%H%M%S`
read -p "Enter directory output name [${default}]: " userinput
DIRNAME=${userinput:-${default}}
printf "\n\tOutput directory: %s\n\n" "$DIRNAME"

#Parse input option to run motion outliers deweighting (default: yes)
while true; do
    read -p "Run Motion Outliers Deweighting of timeseries? (y/n) [Recommended: y]: " ansmot
    case "$ansmot" in
        [yY]* )
            #printf "\n\t%s\n" 'Analysis: resting-state data'
            runmot="M"
            break;;
        [nN]* )
            #printf "\n\t%s\n" 'Analysis: task-based data (skip bptf)'
            runmot="m"
            break;;
        * )
            printf "\n%s\n" 'Answer either “y” or “n”.'
    esac
done
printf "\n"
#Parse input option to run single-subject ICA (default: yes)
while true; do
    read -p "Run SS-ICA? (y/n) [Recommended: y]: " ansica
    case "$ansica" in
        [yY]* )
            #printf "\n\t%s\n" 'Analysis: resting-state data'
            runica="I"
            break;;
        [nN]* )
            #printf "\n\t%s\n" 'Analysis: task-based data (skip bptf)'
            runica="i"
            break;;
        * )
            printf "\n%s\n" 'Answer either “y” or “n”.'
    esac
done
# Compose options
opts="-${runmot}${runica}"

# Initialize some variables
LOGDIR=`pwd`/${DIRNAME}/logs
SECONDS=0
elapsed=0
exectime=0
anat=""

#If DIRNAME exists add a timestamp
[ -d $DIRNAME ] && { DIRNAME=${default}_${DIRNAME}; printf "\n\t*** Directory exists ***\nOutput dir now set to: ${DIRNAME}"; }
#List all DCM directories of subjects data
find `pwd`/ -mindepth 1 -maxdepth 1 -type d > lnifmri_prep_dcmlist.txt
#Create output directory
mkdir -p $DIRNAME 
mkdir -p $LOGDIR
#This empty file marks an output directory
printf "LNiF MRI Lab Preprocessing Pipeline\nDo not remove this file!\nCreated: ${default}" > ${DIRNAME}/.lnifmri_prep_output.txt
sleep 2

cat << EOL > ${LOGDIR}/lnifmri_prep00_inputlog.txt
**************************************************************
LNiF MRI Lab Preprocessing Pipeline
CIMeC - Center for Mind/Brain Science

User input log - ${default}


Output Directory: ${DIRNAME}

Run Motion Outliers Deweighting of timeseries? ${ansmot}

Run SS-ICA? ${ansica}
EOL

##############################################################################
#These are calls to individual tools - lines are self-explanatory

printf "\nCreating directory structure\t"
$LNIFMRIDIR/lnifmri_prep00_organize -o ${DIRNAME} >> ${LOGDIR}/lnifmri_prep00_organize.txt
duration=$SECONDS
printf -v laptime "%04dm:%02ds" "$(($duration / 60))" "$(($duration % 60))"
elapsed=$(echo $elapsed + $duration | bc)
Progress

cd ./${DIRNAME}

printf "\n"
$LNIFMRIDIR/lnifmri_prep00_screening
duration=$SECONDS
printf -v laptime "%04dm:%02ds" "$(($duration / 60))" "$(($duration % 60))"
elapsed=$(echo $elapsed + $duration | bc)

# Close user input log file
printf "\n(c) stefano.tambalo@unitn.it, 2020.\n" >> ${LOGDIR}/lnifmri_prep00_inputlog.txt
printf "**************************************************************\n" >> ${LOGDIR}/lnifmri_prep00_inputlog.txt
printf "**************************************************************\n\n" >> ${LOGDIR}/lnifmri_prep00_inputlog.txt

# Start pipeline
clear
Start

SECONDS=0
printf "Processing structural data\t"
$LNIFMRIDIR/lnifmri_prep01_anat >> ${LOGDIR}/lnifmri_prep01_structural.txt
# $LNIFMRIDIR/lnifmri_prep01_mp2rage >> ${LOGDIR}/lnifmri_prep01_mp2rage.txt &
duration=$SECONDS
printf -v laptime "%04dm:%02ds" "$(($duration / 60))" "$(($duration % 60))"
elapsed=$(echo $elapsed + $duration | bc)
Progress

if [[ -s ${LOGDIR}/lnifmri_prep_inputlist.txt  ]]; then

    SECONDS=0
    printf "Processing functional data\n\tMotion correction\t"
    $LNIFMRIDIR/lnifmri_prep02_preproc >> ${LOGDIR}/lnifmri_prep02_motioncorr.txt
    duration=$SECONDS
    printf -v laptime "%04dm:%02ds" "$(($duration / 60))" "$(($duration % 60))"
    elapsed=$(echo $elapsed + $duration | bc)
    Progress

    SECONDS=0
    printf "\tSuscept. dist. correction"
    $LNIFMRIDIR/lnifmri_prep03_sdc >> ${LOGDIR}/lnifmri_prep03_suscdistcorr.txt
    duration=$SECONDS
    printf -v laptime "%04dm:%02ds" "$(($duration / 60))" "$(($duration % 60))"
    elapsed=$(echo $elapsed + $duration | bc)
    Progress

    SECONDS=0
    printf "\tNuis. regr. and BP filter"
    $LNIFMRIDIR/lnifmri_prep04_filter ${opts} >> ${LOGDIR}/lnifmri_prep04_filter.txt
    duration=$SECONDS
    printf -v laptime "%04dm:%02ds" "$(($duration / 60))" "$(($duration % 60))"
    elapsed=$(echo $elapsed + $duration | bc)
    Progress

    SECONDS=0
    printf "Creating QC report\t\t"
    $LNIFMRIDIR/lnifmri_prep05_qc >> ${LOGDIR}/lnifmri_prep05_qcreport.txt
    duration=$SECONDS
    printf -v laptime "%04dm:%02ds" "$(($duration / 60))" "$(($duration % 60))"
    elapsed=$(echo $elapsed + $duration | bc)
    Progress

    printf -v exectime "%04dm:%02ds" "$(($elapsed / 60))" "$(($elapsed % 60))"
    Stop

else

    printf "Functional input list is empty: nothing to process."
    Stop
    
fi